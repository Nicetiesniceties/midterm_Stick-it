import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * A simple component for an html element with editable contents.
 */
export default class ContentEditable extends React.Component<Props> {
    lastHtml: string;
    el: any;
    getEl: () => any;
    render(): React.ReactElement<{
        ref: any;
        onInput: (originalEvt: React.SyntheticEvent<any, Event>) => void;
        onBlur: Function;
        onKeyDown: Function;
        contentEditable: boolean;
        dangerouslySetInnerHTML: {
            __html: string;
        };
        children?: React.ReactNode;
        onChange?: Function | undefined;
        disabled?: boolean | undefined;
        className?: string | undefined;
        style?: Object | undefined;
    }>;
    shouldComponentUpdate(nextProps: Props): boolean;
    componentDidUpdate(): void;
    emitChange: (originalEvt: React.SyntheticEvent<any, Event>) => void;
    static propTypes: {
        html: PropTypes.Validator<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        disabled: PropTypes.Requireable<boolean>;
        tagName: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        innerRef: PropTypes.Requireable<object>;
    };
}
export interface Props {
    html: string;
    onChange?: Function;
    onBlur?: Function;
    onKeyDown?: Function;
    disabled?: boolean;
    tagName?: string;
    className?: string;
    style?: Object;
    innerRef?: React.RefObject<HTMLElement> | Function;
}
